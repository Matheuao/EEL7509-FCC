"""
Escreva um c칩digo que receba os valores dos coeficientes de um
polin칪nimo de segunda ordem 洧녭(洧논) = 洧녩洧논 2 + 洧녪洧논 + 洧녫 e calcule as suas ra칤zes
usando o m칠todo solve do SymPy. Al칠m disso, seu c칩digo deve calcular
analiticamente o valor de m칤nimo ou m치ximo de 洧녭(洧논), fazendo as derivadas
necess치rias para tal (primeira derivada para encontrar pontos cr칤ticos e segunda
derivada para determinar se trata-se de um m칤nimo ou m치ximo). Todos os
c치lculos necess치rios devem ser feitos usando o SymPy. Para verificar os
resultados, fa칞o um gr치fico com a curva de 洧녭(洧논), as ra칤zes do polin칪mio, e os
pontos de m칤nimo ou m치ximo encontrados.
"""

import sympy as smp
import numpy as np
import matplotlib.pyplot as plt

def solve_quadratic_function(a,b,c):
    
    x = smp.symbols('x')
    f = a*x**2 + b*x + c

    f_diff = smp.diff(f, x)
    f_diff2 = smp.diff(f_diff, x)

    # Encontrar ponto cr칤tico
    critical_points = smp.solve(f_diff, x)
    critical_point = critical_points[0] if critical_points else None

    # Classificar ponto cr칤tico
    type = "inconclusivo"
    if critical_point is not None:
        second_deriv_at_cp = f_diff2.subs(x, critical_point)
        if second_deriv_at_cp > 0:
            type = "m칤nimo"
        elif second_deriv_at_cp < 0:
            type = "m치ximo"


    roots = smp.solve(f, x)

   
    print("\nFun칞칚o f(x):", f)
    print("Ra칤zes da fun칞칚o:", roots)
    print("Ponto cr칤tico:", critical_point)
    print("Tipo do ponto cr칤tico:", type)
    if critical_point is not None:
        print("Valor de f(x) no ponto cr칤tico:", f.subs(x, critical_point))

    f_lambdified = smp.lambdify(x, f, 'numpy')

    # Gerar valores para o gr치fico
    x_vals = np.linspace(float(critical_point)-10, float(critical_point)+10, 400) if critical_point else np.linspace(-10, 10, 400)
    y_vals = f_lambdified(x_vals)

    plt.figure(figsize=(10, 6))
    plt.plot(x_vals, y_vals, label='f(x)', color='blue')
    
    # marcar as raizes
    for r in roots:
        if r.is_real:
            r_val = float(r)
            plt.plot(r_val, 0, 'ro', label='Raiz' if r == roots[0] else "")

    # Marcar ponto cr칤tico
    if critical_point is not None:
        cp_x = float(critical_point)
        cp_y = float(f.subs(x, critical_point))
        plt.plot(cp_x, cp_y, 'go', label=f'{type.title()} local')

    plt.axhline(0, color='black', linewidth=0.5)
    plt.title('Gr치fico de f(x), ra칤zes e ponto cr칤tico')
    plt.xlabel('x')
    plt.ylabel('f(x)')
    plt.grid(True)
    plt.legend()
    plt.show()


a = float(input("Digite o coeficiente a: "))
b = float(input("Digite o coeficiente b: "))
c = float(input("Digite o coeficiente c: "))

solve_quadratic_function(a,b,c)